
from flask import g, render_template, stream_template, Blueprint, flash, request, jsonify
from flask_login import current_user, login_required
from  sqlalchemy.sql.expression import func

from web.models import (
    Task, User, Attendance
)
from web import db, csrf

from web.utils.db_session_management import db_session_management
#from web.utils.calc_percent import cal_percent
from web.utils.decorators import role_required

from datetime import datetime, date, timedelta

import traceback

def handle_response(message=None, alert=None, data=None):
    """ only success response should have data and be set to True. And  """
    response_data = {
        'message': message,
    }
    if data:
        response_data['alert'] = alert

    if data:
        response_data['data'] = data

    return response_data

main = Blueprint('main', __name__)

@main.route("/")
@main.route("/home")
@login_required
# @role_required('none')
@role_required('manager', 'admin', '*')
@role_required('*')
@db_session_management
def index():

    user_id = current_user.id
    tasks = Task.query.filter_by(user_id=user_id).order_by(Task.timestamp.desc()).all()

    tasks_list = []
    for task in tasks:
        
        tasks_list.append({
            'id': task.id,
            'description': task.description,
            'status': task.status,
            
            'timestamp': task.timestamp.strftime('%Y-%m-%d') \
                if task.timestamp is not None and task.timestamp != "" else None
        })
    
    context = {
        "tasks_list": tasks_list,
        "status_options" : ["pending", "completed", "on-going", "stuck", "cancelled"]  # Define status options
        }

    return stream_template('index.html', **context)


@main.route("/people", methods=['GET', 'POST'])
@login_required
@role_required('*')
@db_session_management
def people():

    referrer =  request.headers.get('Referer')
    
    username, action = request.args.get('username', None), request.args.get('action', None)
    if username != None and action == 'del':
        if not current_user.is_admin():
            return jsonify({ 
                'response': f'Hey! {current_user.name or current_user.username}, You do not have permission to remove or delete this account',
                'flash':'alert-danger',
                'link': f'{referrer}'})

        user = User.query.filter(User.deleted == 0, User.username==username).first()
        
        if user:
            
            user.name = user.name
            user.deleted = True
            db.session.commit()
            
            flash(f'User Has Been Deleted!', 'danger')
            return jsonify({ 
                'response': f'Hmm, User Deleted!!!',
                'flash':'alert-danger',
                'link': f'{referrer}'})
            
        return jsonify({ 
                'response': f'User Not Available',
                'flash':'alert-warning',
                'link': f'{referrer}'})
    
    page = request.args.get('page', 1, type=int)  # Get the requested page number
    per_page = 10  # Number of items per page
    #users = User.query.order_by(User.id.desc()).paginate(page=page, per_page=per_page)
    users = User.query.filter(User.deleted == 0).order_by( User.created.desc()).paginate(page=page, per_page=per_page)
    g.brand = Brand.query.first()
    g.user = User.query.filter(User.deleted == 0, User.username==username).first()
    context = {
    'pname' : 'People : (Staffs | Customers | Student)',
    'users': users
    }
    #return stream_template('people/index.html', **context)
    return render_template('people/index.html', **context)

@main.route('/attendance', methods=['POST'])
@csrf.exempt
def attendance():
    try:
        
        if not db.session.is_active:
            db.session.begin()
    
        data = request.get_json()
        #print(data)
        
        user_id = data.get('user_id', current_user.id)
        action = data.get('action')
        today = data.get('today', datetime.utcnow() )
        comment = data.get('comment', None )
        #print(action == 'signin')
        user = User.query.get(user_id)
        
        if not user:
            return jsonify({"error": "User not found"}), 404

        if (action == 'signin'):
            attendance = Attendance(user_id=user_id, timestamp=today, status='p')
            db.session.add(attendance)
            attendance.sign_in_time = today
            attendance.comment = comment if comment is not None else 'resumed for the day'
            db.session.commit()
            # Refresh the session and query for the latest attendance record
            db.session.refresh(attendance)
            #return jsonify({"message":f"Signed in | {attendance.sign_in_time} "}), 200
        
            #formatted_sign_in_time = attendance.sign_out_time.strftime("%B %d, %Y at %I:%M %p")
            formatted_sign_in_time = today.strftime("%B %d, %Y at %I:%M %p")
            return jsonify({"message": f"signed in at {formatted_sign_in_time}"}), 200
        
        elif (action == 'signout'):
            #attendance = Attendance.query.filter_by(user_id=user_id, timestamp=today).first()
            # filter where weather a user has logged that day first, b/4 trying to cloc-out
            from sqlalchemy import and_, func
            attendance = Attendance.query.filter(
                and_(
                    Attendance.user_id == user_id,
                    func.date(Attendance.sign_in_time) == func.date(today),
                    Attendance.sign_out_time == None
                )
            ).order_by(Attendance.timestamp.desc()).first()

            if not attendance or not attendance.sign_in_time:
                return jsonify({"message": "Cannot sign out without signing in first"}), 400

            if attendance.sign_in_time and attendance.status == 'p':
                
                attendance.comment = comment if comment is not None else 'closed for the day'
                
                attendance.sign_out_time = today
                #attendance.status = 'a'
                db.session.commit()
                #return jsonify({"message": f"Signed-out at {attendance.sign_out_time}" }), 200
                formatted_sign_out_time = today.strftime("%B %d, %Y at %I:%M %p")
                return jsonify({"message": f"signed-out at {formatted_sign_out_time}"}), 200

        return jsonify({"message": "Invalid action"}), 400

    except Exception as ex:
        print(traceback.print_exc())
        print(ex)
        return jsonify({"message": f"{ex}"})
    
@main.route('/total_attendance', methods=['GET'])
@login_required
def total_attendance():
    user_id = current_user.id

    # Get the current date
    current_date = datetime.now()

    # Calculate the start date of the current month
    start_date = datetime(current_date.year, current_date.month, 1)

    # Calculate the end date of the current month
    next_month = current_date.replace(day=28) + timedelta(days=4)
    end_date = next_month - timedelta(days=next_month.day)

    # Query to retrieve the unique dates on which the user clocked in within the month
    unique_dates = db.session.query(func.date(Attendance.timestamp)).filter(
        Attendance.user_id == user_id,
        Attendance.timestamp >= start_date,
        Attendance.timestamp <= end_date
    ).distinct()

    # Count the number of unique dates
    total_attendance = unique_dates.count()

    return jsonify({"total_attendance": total_attendance}), 200

@main.route('/status', methods=['GET'])
@login_required
def get_status():
    
    user_id = current_user.id
    today = date.today()
    #attendance = Attendance.query.filter_by(user_id=user_id, timestamp=today).first()
    
    from sqlalchemy import and_, func

    # filter weather a user has logged-in atleast for that day to know the status of a user for the day.
    attendance = Attendance.query.filter(
        and_(
            Attendance.user_id == user_id,
            #func.date(Attendance.timestamp) == func.date(today)
            Attendance.timestamp == func.date(today)
        )
    ).order_by(Attendance.created.desc()).first()

    if attendance:
        #if attendance.sign_in_time and not attendance.sign_out_time:
        if attendance.sign_in_time and attendance.sign_out_time is None:
        #if attendance.sign_in_time and attendance.status == 'p':
            
            return jsonify({"status": "signed_in"}), 200

        return jsonify({"status": "signed_out"}), 200
    
    return jsonify({"status": "not_signed_in"}), 200

# create tasks
@main.route('/tasks', methods=['POST'])
@login_required
@csrf.exempt
def add_task():
    
    if not db.session.is_active:
            db.session.begin()
            
    # Check if the request's content type is JSON
    if request.headers['Content-Type'] == 'application/json':

        try:
            
            # Attempt to parse the JSON data
            data = request.get_json()

            description = data.get('description')
            status = data.get('status', 'pending')
            timestamp = data.get('timestamp', datetime.timestamp)

            if not description :
                return jsonify({'error': 'kindly provide a description for this task'}), 400

            new_task = Task(
                description=description,
                status=status,
                timestamp=timestamp if timestamp is not None and timestamp != "" else None, 
                #else set to None for timestamp so it can take default time
                user_id=current_user.id,
                user=current_user
            )

            db.session.add(new_task)
            db.session.commit()
            return jsonify({'success':True, 'message': 'Task added successfully'}), 200
        
        except Exception as e:
             # Return an error response if JSON parsing fails
            return jsonify({"error": "Invalid JSON", "message": str(e)}), 400
    else:
        # Return an error response if the content type is not JSON
        return jsonify({"error": "Content-Type must be application/json"}), 400
    
# fetch/get tasks
@main.route('/tasks', methods=['GET'])
@login_required
@csrf.exempt
def get_tasks():
    try:
        user_id = current_user.id
        tasks = Task.query.filter_by(user_id=user_id).order_by(Task.timestamp.desc()).all()

        tasks_list = []
        for task in tasks:
            tasks_list.append({
                'id': task.id,
                'description': task.description,
                'status': task.status,
                'timestamp': task.timestamp.strftime('%Y-%m-%d')\
                    if task.timestamp and task.timestamp != "" else None
            })
        print(tasks_list)
        return jsonify({"tasks": tasks_list}), 200
    except Exception as e:
        return jsonify({"success": False, "error":f"{e}"}), 200

# updating
@main.route('/tasks/<int:task_id>', methods=['PUT'])
@login_required
@csrf.exempt
def update_task(task_id):
    try:
        data = request.get_json()
        task = Task.query.get(task_id)
        
        if not task or task.user_id != current_user.id:
            return jsonify({"error": "Task not found"}), 404

        task.description = data['description']
        task.status = data['status']
        # print(type(data['timestamp']))
        task.timestamp = datetime.strptime(data['timestamp'], '%Y-%m-%d') \
            if isinstance(data['timestamp'], date) else func.now()

        db.session.commit()
        return jsonify({"success": True, "message":"Task updated successfully"}), 200
    except Exception as e:
        return jsonify({"success": False, "error":f"{e}"}), 200
    
# deletion
@main.route('/tasks/<int:task_id>', methods=['DELETE'])
@login_required
@csrf.exempt
def delete_task(task_id):
    try:
        
        task = Task.query.get(task_id)
        
        if not task or task.user_id != current_user.id:
            return jsonify({"error": "Task not found"}), 404

        db.session.delete(task)
        db.session.commit()
        # return jsonify({"success": True}), 200
        return jsonify({"success": True, "message":"Task deleted successfully"}), 200
    
    except Exception as e:
        return jsonify({"success": False, "error":f"{e}"}), 200